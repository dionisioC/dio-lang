/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dio.lang

import java.io.File
import kotlin.text.StringBuilder

val VALID_NUMBERS = ('0'..'9') + '.'
val IGNORED_CHARS_IN_NUMBER = "_,"
val STRING_ESCAPED_CHARS = """t""""
val STRING_SUB_CHARS = "\t\""
private val CHAR_START_CHARACTER = '\''

fun main() {
    val string = """let identifier = 1
        |let number = identifier + 1
        |"My test"
        |293_875
    """.trimMargin()
    val lexer = Lexer(string)
    println(lexer.lex())
}


fun scanChar(string: String, index: Int): Token {
    val stringBuilder = StringBuilder()
    var internalIndex = index
    while (true) {
        if (internalIndex >= string.length) {
            break
        }

        val char = string[internalIndex]

        if (char == '\\') {
            internalIndex++
            val nextChar = string[internalIndex]

            if (nextChar !in STRING_ESCAPED_CHARS) {
                throw IllegalArgumentException("Unrecognized escaped char")
            } else {
                stringBuilder.append(STRING_SUB_CHARS[STRING_ESCAPED_CHARS.indexOf(nextChar)])
            }
        } else if (char != '\'') { // ';'
            stringBuilder.append(char)
        } else {
            break
        }

        internalIndex ++

    }

    return Token(TokenType.Char, 1, index, internalIndex, stringBuilder.toString())
}

data class LexedFile(
    val expressions: List<Token>,
)

sealed interface Expression


class UnaryExpression: Expression {
}
